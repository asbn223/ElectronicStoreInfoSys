
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Asus
 */
public class ES_Info extends javax.swing.JFrame {

    /**
     * Creates new form ES_Info
     */
    //User Defined Class Level Variables
    int ne = 0;
    ArrayList<Device> deviceList = new ArrayList<>();
    ArrayList<String> listDevice = new ArrayList<>();
    String[][] newDevice;
    
    //Constructor of the Program
    public ES_Info() {
        initComponents();
        
        //Using header to sort the provided data
        JTableHeader header = deviceInfoTable.getTableHeader();
        header.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent event) {
                Point point = event.getPoint();
                int column = deviceInfoTable.columnAtPoint(point);
                
                clearTable();
                // do your real thing here...
                //Sort according to column header name and column index which starts from 0
                if (deviceInfoTable.getColumnName(column).equals("Device ID") && column==0) {
                    mergeSort(deviceList, column);
                    insertSortedData();
                }
                else if(deviceInfoTable.getColumnName(column).equals("Device Name") && column==1){
                    mergeSort(deviceList, column);
                    insertSortedData();
                }
                else if(deviceInfoTable.getColumnName(column).equals("Brand") && column==2){
                    mergeSort(deviceList, column);
                    insertSortedData();
                }
                else if(deviceInfoTable.getColumnName(column).equals("Category") && column==3){
                    mergeSort(deviceList, column);
                    insertSortedData();
                }
                else if(deviceInfoTable.getColumnName(column).equals("Price") && column==4){
                    mergeSort(deviceList, column);
                    insertSortedData();
                }
                else if(deviceInfoTable.getColumnName(column).equals("Date") && column==5){
                    mergeSort(deviceList, column);
                    insertSortedData();
                }

            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpCategory = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        deviceInfoTable = new javax.swing.JTable();
        devicePanel = new javax.swing.JPanel();
        lblDeviceName = new javax.swing.JLabel();
        txtDeviceName = new javax.swing.JTextField();
        lblBrand = new javax.swing.JLabel();
        comboBoxBrand = new javax.swing.JComboBox<>();
        lblCategory = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        rBtnTelevision = new javax.swing.JRadioButton();
        rBtnHeadPhone = new javax.swing.JRadioButton();
        rBtnLaptop = new javax.swing.JRadioButton();
        rBtnGameConsole = new javax.swing.JRadioButton();
        rBtnAccessories = new javax.swing.JRadioButton();
        rBtnSmartPhone = new javax.swing.JRadioButton();
        txtDay = new javax.swing.JTextField();
        txtMonth = new javax.swing.JTextField();
        txtYear = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        coBoxSearch = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        quitMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SRS Electronic Store");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        deviceInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Device ID", "Device Name", "Brand", "Category", "Price", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        deviceInfoTable.getTableHeader().setReorderingAllowed(false);
        deviceInfoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deviceInfoTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(deviceInfoTable);
        if (deviceInfoTable.getColumnModel().getColumnCount() > 0) {
            deviceInfoTable.getColumnModel().getColumn(0).setResizable(false);
            deviceInfoTable.getColumnModel().getColumn(1).setResizable(false);
            deviceInfoTable.getColumnModel().getColumn(2).setResizable(false);
            deviceInfoTable.getColumnModel().getColumn(3).setResizable(false);
        }

        devicePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Device Information", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        devicePanel.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N

        lblDeviceName.setText("Device Name");

        txtDeviceName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDeviceNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDeviceNameKeyReleased(evt);
            }
        });

        lblBrand.setText("Brand");

        comboBoxBrand.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select Brand-", "Sony", "Samsung", "LG", "Microsoft", "Google", "Origins" }));
        comboBoxBrand.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblCategory.setText("Category");

        lblPrice.setText("Price");

        lblDate.setText("Date");

        txtPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPriceKeyReleased(evt);
            }
        });

        btnGrpCategory.add(rBtnTelevision);
        rBtnTelevision.setText("Television");

        btnGrpCategory.add(rBtnHeadPhone);
        rBtnHeadPhone.setText("HeadPhone");

        btnGrpCategory.add(rBtnLaptop);
        rBtnLaptop.setText("Laptop");

        btnGrpCategory.add(rBtnGameConsole);
        rBtnGameConsole.setText("Game Console");

        btnGrpCategory.add(rBtnAccessories);
        rBtnAccessories.setText("Accessories");

        btnGrpCategory.add(rBtnSmartPhone);
        rBtnSmartPhone.setText("SmartPhone");

        txtDay.setText("DD");
        txtDay.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDayFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDayFocusLost(evt);
            }
        });
        txtDay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDayKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDayKeyReleased(evt);
            }
        });

        txtMonth.setText("MM");
        txtMonth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMonthFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMonthFocusLost(evt);
            }
        });
        txtMonth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMonthKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMonthKeyReleased(evt);
            }
        });

        txtYear.setText("YYYY");
        txtYear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtYearFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtYearFocusLost(evt);
            }
        });
        txtYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtYearKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtYearKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout devicePanelLayout = new javax.swing.GroupLayout(devicePanel);
        devicePanel.setLayout(devicePanelLayout);
        devicePanelLayout.setHorizontalGroup(
            devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(devicePanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDeviceName)
                    .addComponent(lblBrand)
                    .addComponent(lblCategory)
                    .addComponent(lblPrice)
                    .addComponent(lblDate))
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, devicePanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDeviceName)
                            .addGroup(devicePanelLayout.createSequentialGroup()
                                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboBoxBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rBtnSmartPhone)
                                    .addComponent(rBtnHeadPhone)
                                    .addComponent(rBtnGameConsole))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rBtnAccessories)
                                    .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(rBtnTelevision, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(rBtnLaptop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(0, 8, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(devicePanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(devicePanelLayout.createSequentialGroup()
                                .addComponent(txtDay, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        devicePanelLayout.setVerticalGroup(
            devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(devicePanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDeviceName)
                    .addComponent(txtDeviceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBrand)
                    .addComponent(comboBoxBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCategory)
                    .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rBtnTelevision)
                        .addComponent(rBtnSmartPhone)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rBtnHeadPhone)
                    .addComponent(rBtnLaptop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rBtnGameConsole)
                    .addComponent(rBtnAccessories))
                .addGap(18, 18, 18)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPrice, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDate)
                    .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        buttonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buttons", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(btnAdd)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnRemove)
                .addGap(18, 18, 18)
                .addComponent(btnClear)
                .addGap(18, 18, 18)
                .addComponent(btnExit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtSearch.setText("Search");
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        coBoxSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select Search Item-", "Price", "Category", "Brand" }));

        fileMenu.setText("File");

        openFileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFileMenu.setText("Open");
        openFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenu);
        fileMenu.add(jSeparator1);

        quitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        quitMenu.setText("Quit");
        quitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenu);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");

        helpManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpManual.setText("User Manual");
        helpManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpManualActionPerformed(evt);
            }
        });
        helpMenu.add(helpManual);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(devicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(205, 205, 205)
                    .addComponent(coBoxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearch)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(coBoxSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(devicePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        //Method to remove placeholder text and set it to empty
        if (txtSearch.getText().equals("Search")) {
            txtSearch.setText("");
        }
    }//GEN-LAST:event_txtSearchFocusGained

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost
        //Set Search in the txtField of search if clicked somewhere less while it is empty 
        if (txtSearch.getText().trim().equals("")) {
            txtSearch.setText("Search");
        }
    }//GEN-LAST:event_txtSearchFocusLost

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //Method to add the provided information in the table
        
        try {
            //DefaultTableModel is used for adding empty row only
            DefaultTableModel model = (DefaultTableModel) deviceInfoTable.getModel();
            
            //If the table is empty, device No will be 1
            int deviceNo = 1;
            
            //Validation Part to check if the device information provided by the user is valid or not
            if (!txtDeviceName.getText().isEmpty() && !txtPrice.getText().isEmpty() && 
                    !txtDay.getText().isEmpty() && !txtMonth.getText().isEmpty() && 
                    !txtYear.getText().isEmpty() && (rBtnSmartPhone.isSelected() || rBtnTelevision.isSelected() || 
                    rBtnHeadPhone.isSelected() || rBtnLaptop.isSelected() || 
                    rBtnGameConsole.isSelected() || rBtnAccessories.isSelected()) &&
                    comboBoxBrand.getSelectedIndex()!=0) {
                if(!checkNumber(txtDeviceName.getText())){
                    if(checkNumber(txtPrice.getText())){
                        if(checkNumber(txtDay.getText()) || checkNumber(txtMonth.getText()) || checkNumber(txtYear.getText())){
                            if(rBtnSmartPhone.isSelected() || rBtnTelevision.isSelected() || 
                                    rBtnHeadPhone.isSelected() || rBtnLaptop.isSelected() || 
                                    rBtnGameConsole.isSelected() || rBtnAccessories.isSelected()){
                                        if(comboBoxBrand.getSelectedIndex()!=0){
                                            int month = Integer.parseInt(txtMonth.getText());
                                            int day = Integer.parseInt(txtDay.getText());
                                            if (txtYear.getText().length() == 4 && 
                                                    month <= 12 && month >= 1 && 
                                                    day <= 31 && day >= 1) {
                                                    for (int i = 0; i < deviceInfoTable.getRowCount(); i++) {
                                                        if (deviceInfoTable.getValueAt(i, 0)!=null) {
                                                            int deviceID = Integer.parseInt(deviceInfoTable.getValueAt(i, 0).toString());
                                                            if (deviceID>=deviceNo) {
                                                                deviceNo = deviceID+1;
                                                            }
                                                        }
                                                    }
                                                                                                    
                                                String newDeviceID = Integer.toString(deviceNo);
                                                String DeviceName = txtDeviceName.getText();
                                                String Price = txtPrice.getText();
                                                String Date = txtDay.getText()+"/"+txtMonth.getText()+"/"+txtYear.getText();
                                                Object[] newV = null;
                                                String brand = (String) comboBoxBrand.getSelectedItem();
                                                int rowCount = deviceInfoTable.getRowCount();
                                                int columnCount = deviceInfoTable.getColumnCount();
                                                int nextRow=0;
                                                boolean emptyRow=false, exists=false;
                                                String s;
                                                
                                                ArrayList category = new ArrayList<String>();
                                                if(rBtnSmartPhone.isSelected()){
                                                    category.add(rBtnSmartPhone.getText());
                                                }else if(rBtnTelevision.isSelected()){
                                                    category.add(rBtnTelevision.getText());
                                                }else if(rBtnHeadPhone.isSelected()){
                                                    category.add(rBtnHeadPhone.getText());
                                                }else if(rBtnLaptop.isSelected()){
                                                    category.add(rBtnLaptop.getText());
                                                }else if(rBtnGameConsole.isSelected()){
                                                    category.add(rBtnGameConsole.getText());
                                                }else if(rBtnAccessories.isSelected()){
                                                    category.add(rBtnAccessories.getText());
                                                }
                                                else{
                                                    JOptionPane.showMessageDialog(rootPane, 
                                                            "radio button not selected", "Error", JOptionPane.ERROR_MESSAGE);
                                                }
                                                String valCategory = String.join(", ", category);

                                                String[] VAR2 = {newDeviceID, DeviceName, brand, valCategory, Price, Date};

                                                //Checking if the table row is empty or not
                                                do{
                                                    s=(String) deviceInfoTable.getValueAt(nextRow,0);
                                                    if(s != null && s.length() != 0){
                                                      nextRow++;  
                                                    }
                                                        
                                                    else {
                                                        emptyRow = true;
                                                    }
                                                }while(nextRow < rowCount && !emptyRow);
                                                
                                                //checking for existing value in the table
                                                for (int i = 0; i < rowCount; i++) {
                                                    if (deviceInfoTable.getValueAt(i, 1)!=null) {
                                                        if (deviceInfoTable.getValueAt(i, 1).equals(DeviceName)) {
                                                            JOptionPane.showMessageDialog(rootPane, "Already added");
                                                            exists=true;
                                                            break;
                                                        } 
                                                    }
                                                    
                                                }
                                                
                                                //if the value doesn't exists in the table then it will be added to the table
                                                if (!exists) {
                                                    for (int j = 0; j < columnCount; j++) {
                                                        deviceInfoTable.setValueAt(VAR2[j], nextRow, j);
                                                    }
                                                    Device newDeviceInfo = new Device(newDeviceID, DeviceName, brand, valCategory, Price, Date);
                                                    deviceList.add(newDeviceInfo);
                                                    model.addRow(newV); // Adding new empty row each time when this method is called
                                                    clearField(); //Clear the field of the device info panel
                                                    JOptionPane.showMessageDialog(rootPane, "Items has been added", "Information",
                                                    JOptionPane.INFORMATION_MESSAGE);
                                                }
                                            }else{
                                                JOptionPane.showMessageDialog(rootPane, "Please input correct date", "Information",
                                                    JOptionPane.INFORMATION_MESSAGE);
                                            }
                                            
                                        }else{ 
                                            JOptionPane.showMessageDialog(rootPane,"Please select one of the brand", 
                                                    "Information", JOptionPane.ERROR_MESSAGE);
                                        }
                                    }else{
                                        JOptionPane.showMessageDialog(rootPane,"Please select one of the category", 
                                                    "Information", JOptionPane.ERROR_MESSAGE);
                                    }

                                }else{
                                    JOptionPane.showMessageDialog(rootPane,"Date needs to be in Number format", 
                                                    "Information", JOptionPane.ERROR_MESSAGE);
                                }

                            }else{
                                JOptionPane.showMessageDialog(rootPane,"Price needs to be in Number format", 
                                                    "Information", JOptionPane.ERROR_MESSAGE);
                            }
                    }else{
                        JOptionPane.showMessageDialog(rootPane,"Device Name needs to be in Alpahbetic words format", 
                                                    "Information", JOptionPane.ERROR_MESSAGE);
                    }
            }
            else{
               JOptionPane.showMessageDialog(rootPane,"All the field are required. \n Please Insert or select from the fields", 
                                                    "Information", JOptionPane.ERROR_MESSAGE); 
            }
            
        }catch (NumberFormatException ae) {
            JOptionPane.showMessageDialog(rootPane, "Invalid Number!, Please Enter a valid number", "Warning",
                    JOptionPane.WARNING_MESSAGE); 
        }
        catch (Exception e) {
           JOptionPane.showMessageDialog(rootPane, "There is an error while adding", "Error", JOptionPane.ERROR_MESSAGE); 
        }
            
        
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtDayFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDayFocusGained
        //Method to remove placeholder text and set it to empty
        if (txtDay.getText().equals("DD")) {
            txtDay.setText("");
        }
    }//GEN-LAST:event_txtDayFocusGained

    private void txtDayFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDayFocusLost
        //Set DD in the txtField of day of date if clicked somewhere less while it is empty 
        if (txtDay.getText().trim().equals("")) {
            txtDay.setText("DD");
        }
    }//GEN-LAST:event_txtDayFocusLost

    private void txtMonthFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMonthFocusGained
        //Method to remove placeholder text and set it to empty
        if (txtMonth.getText().equals("MM")) {
            txtMonth.setText("");
        }
    }//GEN-LAST:event_txtMonthFocusGained

    private void txtMonthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMonthFocusLost
        //Set MM in the txtField of month of date if clicked somewhere less while it is empty 
        if (txtMonth.getText().trim().equals("")) {
            txtMonth.setText("MM");
        }
    }//GEN-LAST:event_txtMonthFocusLost

    private void txtYearFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYearFocusGained
        //Method to remove placeholder text and set it to empty
        if (txtYear.getText().equals("YYYY")) {
            txtYear.setText("");
        }
    }//GEN-LAST:event_txtYearFocusGained

    private void txtYearFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYearFocusLost
        //Set YYYY in the txtField of year of date if clicked somewhere less while it is empty 
        if (txtYear.getText().trim().equals("")) {
            txtYear.setText("YYYY");
        }
    }//GEN-LAST:event_txtYearFocusLost

    private void txtDeviceNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDeviceNameKeyPressed
        // This method doesn't lets user to add white space if textfield is empty
        if (evt.getKeyCode()==32 && txtDeviceName.getText().length()==0) {
            txtDeviceName.setEditable(false);
        }
    }//GEN-LAST:event_txtDeviceNameKeyPressed

    private void txtDeviceNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDeviceNameKeyReleased
        // This method will enable editability of textField
        txtDeviceName.setEditable(true);
    }//GEN-LAST:event_txtDeviceNameKeyReleased

    private void txtPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceKeyPressed
        // This method doesn't lets user to add white space if textfield is empty
        // This method only lets user to add char if key pressed from 0 to 9
        // Key Code is 8 is for BackSpace
        
        if ((evt.getKeyChar()>='0' && evt.getKeyChar()<='9') || evt.getKeyChar()=='.') {
            if(txtPrice.getText().contains(".") && evt.getKeyChar()=='.'){
                txtPrice.setEditable(false);
            }else{
                txtPrice.setEditable(true);
            }
        }
        else if(evt.getKeyCode()==8){
            txtPrice.setEditable(true);
        }
        else{
            txtPrice.setEditable(false);
        }
    }//GEN-LAST:event_txtPriceKeyPressed

    private void txtPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceKeyReleased
        // This method will enable editability of textField
        txtPrice.setEditable(true);
    }//GEN-LAST:event_txtPriceKeyReleased

    private void txtDayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDayKeyPressed
         // This method doesn't lets user to add white space if textfield is empty
        // This method only lets user to add char if key pressed from 0 to 9
        // Key Code is 8 is for BackSpace
        
        if ((evt.getKeyChar()>='0' && evt.getKeyChar()<='9')) {
            if (txtDay.getText().length()==2) {
                txtDay.setEditable(false);
            }else{
                txtDay.setEditable(true);
            }
        }
        else if(evt.getKeyCode()==8){
            txtDay.setEditable(true);
        }
        else{
            txtDay.setEditable(false);
        }
        
    }//GEN-LAST:event_txtDayKeyPressed

    private void txtDayKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDayKeyReleased
        // This method will enable editability of textField
        txtDay.setEditable(true);
    }//GEN-LAST:event_txtDayKeyReleased

    private void txtMonthKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMonthKeyPressed
        // This method doesn't lets user to add white space if textfield is empty
        // This method only lets user to add char if key pressed from 0 to 9
        // Key Code is 8 is for BackSpace
        
        if ((evt.getKeyChar()>='0' && evt.getKeyChar()<='9')) {
            if (txtMonth.getText().length()==2) {
                txtMonth.setEditable(false);
            }else{
                txtMonth.setEditable(true);
            }
        }
        else if(evt.getKeyCode()==8){
            txtMonth.setEditable(true);
        }
        else{
            txtMonth.setEditable(false);
        }
    }//GEN-LAST:event_txtMonthKeyPressed

    private void txtMonthKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMonthKeyReleased
        // This method will enable editability of textField
        txtMonth.setEditable(true);
    }//GEN-LAST:event_txtMonthKeyReleased

    private void txtYearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtYearKeyPressed
        // This method doesn't lets user to add white space if textfield is empty
        // This method only lets user to add char if key pressed from 0 to 9
        // Key Code is 8 is for BackSpace
        
        if ((evt.getKeyChar()>='0' && evt.getKeyChar()<='9')) {
            if (txtYear.getText().length()==4) {
                txtYear.setEditable(false);
            }else{
                txtYear.setEditable(true);
            }
        }
        else if(evt.getKeyCode()==8){
            txtYear.setEditable(true);
        }
        else{
            txtYear.setEditable(false);
        }
    }//GEN-LAST:event_txtYearKeyPressed

    private void txtYearKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtYearKeyReleased
        // This method will enable editability of textField
        txtYear.setEditable(true);
    }//GEN-LAST:event_txtYearKeyReleased

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        /* This method preform action for clear button to clear by
            calling another method called clearField
        */
        clearField();
        
    }//GEN-LAST:event_btnClearActionPerformed

    private void quitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuActionPerformed
        //Exit the program
        System.exit(0);
    }//GEN-LAST:event_quitMenuActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        //Exit the program
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        
        //Get search meanu which choice to find (Price, Brand or Category)
        String searchMode = (String) coBoxSearch.getSelectedItem();

        //If Search Mode is Price then Sort is done according to price
        if (searchMode.equalsIgnoreCase("price")) {
            mergeSort(deviceList, 4);
            //Method to insert data into table
            insertSortedData();
            searchedItem();
            
        }
        
        //If Search Mode is brand then Sort is done according to brand
        else if (searchMode.equalsIgnoreCase("brand")) {
            mergeSort(deviceList, 2);
            //Method to insert data into table
            insertSortedData();
            searchedItem();
        }
        
        //If Search Mode is category then Sort is done according to category
        else if (searchMode.equalsIgnoreCase("category")) {
            mergeSort(deviceList, 3);
            //Method to insert data into table
            insertSortedData();
            searchedItem();
        }
        
        else{
            JOptionPane.showMessageDialog(rootPane, "Please Select Search Category");
        }
        coBoxSearch.setSelectedIndex(0);
        txtSearch.setText("Search");
        
    }//GEN-LAST:event_btnSearchActionPerformed
    //
    private void openFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuActionPerformed
        //when this method is called then File Chooser is opened.

        //Opening file chooser dialog box to choose only txt file and csv file
        FileChooser fileChooser = new FileChooser(new javax.swing.JFrame(), true);
        fileChooser.jFileChooser1.setCurrentDirectory(new File(System.getProperty("user.dir")));
        fileChooser.jFileChooser1.addChoosableFileFilter(new FileNameExtensionFilter("Documents", "txt","csv"));
        fileChooser.jFileChooser1.setAcceptAllFileFilterUsed(false);
        fileChooser.setVisible(true);
        try {
            //Stores file pathName selected by FileChooser
            String openedFile = fileChooser.jFileChooser1.getSelectedFile().toString();
            try {
                readTxt(openedFile);
            } catch (IOException ex) {
                Logger.getLogger(ES_Info.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Please select a file", "Information",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_openFileMenuActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
    //This method will update the mistake data added in table
    
    int selectedRowIndex = deviceInfoTable.getSelectedRow();
        if(selectedRowIndex >=0){
            if (!deviceList.isEmpty()) {
               if (!txtDeviceName.getText().isEmpty() && !txtPrice.getText().isEmpty() && 
                    !txtDay.getText().isEmpty() && !txtMonth.getText().isEmpty() && 
                    !txtYear.getText().isEmpty() && (rBtnSmartPhone.isSelected() || rBtnTelevision.isSelected() || 
                    rBtnHeadPhone.isSelected() || rBtnLaptop.isSelected() || 
                    rBtnGameConsole.isSelected() || rBtnAccessories.isSelected()) &&
                    comboBoxBrand.getSelectedIndex()!=0) {
                    if(!checkNumber(txtDeviceName.getText())){
                        if(checkNumber(txtPrice.getText())){
                            if(checkNumber(txtDay.getText()) || checkNumber(txtMonth.getText()) || checkNumber(txtYear.getText())){
                                if(rBtnSmartPhone.isSelected() || rBtnTelevision.isSelected() || 
                                        rBtnHeadPhone.isSelected() || rBtnLaptop.isSelected() || 
                                        rBtnGameConsole.isSelected() || rBtnAccessories.isSelected()){
                                            if(comboBoxBrand.getSelectedIndex()!=0){
                                                int month = Integer.parseInt(txtMonth.getText());
                                                int day = Integer.parseInt(txtDay.getText());
                                                if (txtYear.getText().length() == 4 && 
                                                        month <= 12 && month >= 1 && 
                                                        day <= 31 && day >= 1) {
                                                        String newDeviceID = (String) deviceInfoTable.getValueAt(selectedRowIndex, 0);
                                                        String DeviceName = txtDeviceName.getText();
                                                        String Price = txtPrice.getText();
                                                        String updateDate = txtDay.getText()+"/"+txtMonth.getText()+"/"+txtYear.getText();
                                                        String brand = (String) comboBoxBrand.getSelectedItem();

                                                        ArrayList category = new ArrayList<String>();
                                                        if(rBtnSmartPhone.isSelected()){
                                                            category.add(rBtnSmartPhone.getText());
                                                        }else if(rBtnTelevision.isSelected()){
                                                            category.add(rBtnTelevision.getText());
                                                        }else if(rBtnHeadPhone.isSelected()){
                                                            category.add(rBtnHeadPhone.getText());
                                                        }else if(rBtnLaptop.isSelected()){
                                                            category.add(rBtnLaptop.getText());
                                                        }else if(rBtnGameConsole.isSelected()){
                                                            category.add(rBtnGameConsole.getText());
                                                        }else if(rBtnAccessories.isSelected()){
                                                            category.add(rBtnAccessories.getText());
                                                        }
                                                        else{
                                                            JOptionPane.showMessageDialog(rootPane, 
                                                                    "radio button not selected", "Error", JOptionPane.ERROR_MESSAGE);
                                                        }
                                                        String valCategory = String.join(", ", category);

                                                        deviceInfoTable.setValueAt(newDeviceID, selectedRowIndex, 0);
                                                        deviceInfoTable.setValueAt(DeviceName,selectedRowIndex,1);
                                                        deviceInfoTable.setValueAt(brand,selectedRowIndex,2);
                                                        if(rBtnSmartPhone.isSelected()){
                                                            deviceInfoTable.setValueAt(rBtnSmartPhone.getText(),selectedRowIndex,3);
                                                        }else if(rBtnTelevision.isSelected()){
                                                            deviceInfoTable.setValueAt(rBtnTelevision.getText(),selectedRowIndex,3);
                                                        }else if(rBtnHeadPhone.isSelected()){
                                                            deviceInfoTable.setValueAt(rBtnHeadPhone.getText(),selectedRowIndex,3);
                                                        }else if(rBtnLaptop.isSelected()){
                                                           deviceInfoTable.setValueAt(rBtnLaptop.getText(),selectedRowIndex,3); 
                                                        }else if(rBtnGameConsole.isSelected()){
                                                            deviceInfoTable.setValueAt(rBtnGameConsole.getText(),selectedRowIndex,3);
                                                        }else{
                                                            deviceInfoTable.setValueAt(rBtnAccessories.getText(),selectedRowIndex,3);
                                                        }
                                                        deviceInfoTable.setValueAt(Price,selectedRowIndex,4);

                                                        deviceInfoTable.setValueAt(updateDate,selectedRowIndex,5);
                                                        Device newDeviceInfo = new Device(newDeviceID, DeviceName, brand, valCategory, Price, updateDate);
                                                        deviceList.set(selectedRowIndex, newDeviceInfo);
                                                        clearField();
                                                }else{
                                                    JOptionPane.showMessageDialog(rootPane, "Please input correct date", "Information",
                                                        JOptionPane.INFORMATION_MESSAGE);
                                                }

                                            }else{ 
                                                JOptionPane.showMessageDialog(rootPane,"Please select one of the brand", 
                                                        "Information", JOptionPane.ERROR_MESSAGE);
                                            }
                                        }else{
                                            JOptionPane.showMessageDialog(rootPane,"Please select one of the category", 
                                                        "Information", JOptionPane.ERROR_MESSAGE);
                                        }

                                    }else{
                                        JOptionPane.showMessageDialog(rootPane,"Date needs to be in Number format", 
                                                        "Information", JOptionPane.ERROR_MESSAGE);
                                    }

                                }else{
                                    JOptionPane.showMessageDialog(rootPane,"Price needs to be in Number format", 
                                                        "Information", JOptionPane.ERROR_MESSAGE);
                                }
                        }else{
                            JOptionPane.showMessageDialog(rootPane,"Device Name needs to be in Alpahbetic words format", 
                                                        "Information", JOptionPane.ERROR_MESSAGE);
                        }
                }
                else{
                   JOptionPane.showMessageDialog(rootPane,"All the field are required. \n Please Insert or select from the fields", 
                                                        "Information", JOptionPane.ERROR_MESSAGE); 
                } 
            }else{
               JOptionPane.showMessageDialog(rootPane,"Sorry, cannot update empty rows", 
                                                        "Information", JOptionPane.ERROR_MESSAGE); 
            }
            
        }else{
            JOptionPane.showMessageDialog(rootPane, "Plese select the row");
        }
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void deviceInfoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deviceInfoTableMouseClicked
        //This method is used to set value of selected item of table in field of Device Information
        int selectedRowIndex = deviceInfoTable.getSelectedRow();
        if (deviceInfoTable.getValueAt(selectedRowIndex, 1) == null|| deviceInfoTable.getValueAt(selectedRowIndex, 2) == null||
            deviceInfoTable.getValueAt(selectedRowIndex, 3) == null|| deviceInfoTable.getValueAt(selectedRowIndex, 4) == null||
            deviceInfoTable.getValueAt(selectedRowIndex, 5) == null|| deviceInfoTable.getValueAt(selectedRowIndex, 0) == null) {
            JOptionPane.showMessageDialog(rootPane, "Selected Row does not have value", "Error", JOptionPane.ERROR_MESSAGE);
        }else{
    
            txtDeviceName.setText(deviceInfoTable.getValueAt(selectedRowIndex, 1).toString());
            if(deviceInfoTable.getValueAt(selectedRowIndex,2).equals("Sony")){
                comboBoxBrand.setSelectedIndex(1);
            }else if(deviceInfoTable.getValueAt(selectedRowIndex,2).equals("Samsung")){
                comboBoxBrand.setSelectedIndex(2);
            }else if(deviceInfoTable.getValueAt(selectedRowIndex,2).equals("LG")){
                comboBoxBrand.setSelectedIndex(3);
            }else if(deviceInfoTable.getValueAt(selectedRowIndex, 2).equals("Microsoft")){
                comboBoxBrand.setSelectedIndex(4);
            }else if(deviceInfoTable.getValueAt(selectedRowIndex, 2).equals("Google")){
                comboBoxBrand.setSelectedIndex(5);
            }else {
                comboBoxBrand.setSelectedIndex(6);
            }

            if(deviceInfoTable.getValueAt(selectedRowIndex,3).equals("SmartPhone")){
                rBtnSmartPhone.setSelected(true);
            }else if(deviceInfoTable.getValueAt(selectedRowIndex,3).equals("Television")){
                rBtnTelevision.setSelected(true);
            }else if(deviceInfoTable.getValueAt(selectedRowIndex,3).equals("HeadPhone")){
                rBtnHeadPhone.setSelected(true);
            }else if(deviceInfoTable.getValueAt(selectedRowIndex,3).equals("Laptop")){
                rBtnLaptop.setSelected(true);
            }else if(deviceInfoTable.getValueAt(selectedRowIndex, 3).equals("Game Console")){
                rBtnGameConsole.setSelected(true);
            }else{
                rBtnAccessories.setSelected(true);
            }
            txtPrice.setText(deviceInfoTable.getValueAt(selectedRowIndex,4).toString());
            String[] tableDate = deviceInfoTable.getValueAt(selectedRowIndex, 5).toString().split("/");
            txtDay.setText(tableDate[0]);
            txtMonth.setText(tableDate[1]);
            txtYear.setText(tableDate[2]);
        }
    }//GEN-LAST:event_deviceInfoTableMouseClicked

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        //This Method removes the selectedItem from ArrayList, Table.
        int selectedRowIndex = deviceInfoTable.getSelectedRow();
        if(selectedRowIndex >=0){
            if (deviceInfoTable.getValueAt(selectedRowIndex, 0)!=null && !deviceList.isEmpty()) {
                deviceList.remove(selectedRowIndex);
                clearField();
                clearTable();
                insertSortedData();  
            }else{
               JOptionPane.showMessageDialog(rootPane, "Selected Row does not have value","Error",JOptionPane.ERROR_MESSAGE); 
            }
            
        }else{
            JOptionPane.showMessageDialog(rootPane, "Plese select the row");
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void helpManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpManualActionPerformed
        //This method is used to open the file provided in the function in the Desktop
        Desktop desktop = Desktop.getDesktop();
        try {
            desktop.open(new File(System.getProperty("user.dir")+"\\Manual.pdf"));
        } catch (IOException ex) {
            Logger.getLogger(ES_Info.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_helpManualActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ES_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ES_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ES_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ES_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ES_Info().setVisible(true);
            }
        });
        
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.ButtonGroup btnGrpCategory;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JComboBox<String> coBoxSearch;
    private javax.swing.JComboBox<String> comboBoxBrand;
    private javax.swing.JTable deviceInfoTable;
    private javax.swing.JPanel devicePanel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem helpManual;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblBrand;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDeviceName;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JMenuItem openFileMenu;
    private javax.swing.JMenuItem quitMenu;
    private javax.swing.JRadioButton rBtnAccessories;
    private javax.swing.JRadioButton rBtnGameConsole;
    private javax.swing.JRadioButton rBtnHeadPhone;
    private javax.swing.JRadioButton rBtnLaptop;
    private javax.swing.JRadioButton rBtnSmartPhone;
    private javax.swing.JRadioButton rBtnTelevision;
    private javax.swing.JTextField txtDay;
    private javax.swing.JTextField txtDeviceName;
    private javax.swing.JTextField txtMonth;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

    //This method returns boolean value if the provided String is number or not.
    public boolean checkNumber(String in)
        {
            try
            {
                Integer.parseInt(in);
                return true;
            }

            catch(Exception err)
            {
                return false;
            }
        }

    //This method clear the table or remove all the value from the Table
    public void clearTable(){
        int rowCount = deviceInfoTable.getRowCount();
        int columnCount = deviceInfoTable.getColumnCount();
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                String a = (String) deviceInfoTable.getValueAt(i, j);
                if (a!=null) {
                    deviceInfoTable.setValueAt("",i, j);
                }
                else{
                    break;
                }
            }
        }
    }
    
    //This is method is to divide the provided ArrayList into two ArrayLists
    public void mergeSort(ArrayList<Device> deviceList, int col){
        
        //Check Size of the ArrayList
        if (deviceList.size()<=1) {
            return ;
        }
        
        //Determining the size to divide the ArrayList into two ArrayLists
        int leftPoint = deviceList.size()/2;
        int rightPoint = deviceList.size() - leftPoint;
        
        //Declaring two ArrayLists
        ArrayList<Device> leftArr = new ArrayList<>();
        ArrayList<Device> rightArr = new ArrayList<>();
        
        //Adding Left part of the data into one ArrayList
        for (int i = 0; i < leftPoint; i++) {
            leftArr.add(deviceList.get(i));
        }
        
        //Adding remainging data into another ArrayList
        for (int k = 0; k < rightPoint; k++) {
            rightArr.add(deviceList.get(leftPoint+k));
        }
        
        
        mergeSort(leftArr, col);
        mergeSort(rightArr, col);
        
        merge(deviceList, leftArr, rightArr, col);
        
    }
    
    //This Method is used for Sorting and Merging the data of the ArrayList
    public void merge(ArrayList<Device> deviceList, ArrayList<Device> left, ArrayList<Device> right, int col) {
        
        //set up index values for merging the two lists 
        int numbersIndex = 0;    
        int leftIndex = 0;
        int rightIndex = 0;

        
        while (leftIndex < left.size() || rightIndex < right.size()) {
            switch (col) {
                case 0:
                    //Sorting the data according to deviceID
                    if (leftIndex < left.size() && rightIndex < right.size()) {
                        if (Integer.parseInt(left.get(leftIndex).deviceId) < Integer.parseInt(right.get(rightIndex).deviceId)) {
                            deviceList.set(numbersIndex, left.get(leftIndex)); //Setting the lowest value data in the given index
                            leftIndex++; numbersIndex++;
                        } else {
                            deviceList.set(numbersIndex, right.get(rightIndex)); //Setting the lowest value data in the given index
                            rightIndex++; numbersIndex++;
                        }
                    }
                    else if(leftIndex<left.size()){
                        deviceList.set(numbersIndex, left.get(leftIndex)); //Setting the lowest value data in the given index
                        leftIndex++; numbersIndex++;
                    }
                    else if(rightIndex<right.size()){
                        deviceList.set(numbersIndex, right.get(rightIndex)); //Setting the lowest value data in the given index
                        rightIndex++; numbersIndex++;
                    }   
                    break;
                case 1:
                    //Sorting the data according to deviceName
                    if (leftIndex < left.size() && rightIndex < right.size()) {
                        if (left.get(leftIndex).deviceName.compareToIgnoreCase(right.get(rightIndex).deviceName) < 0 ) {
                            deviceList.set(numbersIndex, left.get(leftIndex)); //Setting the lowest value data in the given index
                            leftIndex++; numbersIndex++;
                        } else {
                            deviceList.set(numbersIndex, right.get(rightIndex)); //Setting the lowest value data in the given index
                            rightIndex++; numbersIndex++;
                        }
                    }
                    else if(leftIndex<left.size()){
                        deviceList.set(numbersIndex, left.get(leftIndex)); //Setting the lowest value data in the given index
                        leftIndex++; numbersIndex++;
                    }
                    else if(rightIndex<right.size()){
                        deviceList.set(numbersIndex, right.get(rightIndex)); //Setting the lowest value data in the given index
                        rightIndex++; numbersIndex++;
                    }   
                    break;
                case 2:
                    //Sorting the data according to brand name
                    if (leftIndex < left.size() && rightIndex < right.size()) {
                        if (left.get(leftIndex).brand.compareToIgnoreCase(right.get(rightIndex).brand) < 0 ) {
                            deviceList.set(numbersIndex, left.get(leftIndex)); //Setting the lowest value data in the given index
                            leftIndex++; numbersIndex++;
                        } else {
                            deviceList.set(numbersIndex, right.get(rightIndex)); //Setting the lowest value data in the given index
                            rightIndex++; numbersIndex++;
                        }
                    }
                    else if(leftIndex<left.size()){
                        deviceList.set(numbersIndex, left.get(leftIndex)); //Setting the lowest value data in the given index
                        leftIndex++; numbersIndex++;
                    }
                    else if(rightIndex<right.size()){
                        deviceList.set(numbersIndex, right.get(rightIndex)); //Setting the lowest value data in the given index
                        rightIndex++; numbersIndex++;
                    }   
                    break;
                case 3:
                    //Sorting the data according to cateogry name
                    if (leftIndex < left.size() && rightIndex < right.size()) {
                        if (left.get(leftIndex).category.compareToIgnoreCase(right.get(rightIndex).category) < 0 ) {
                            deviceList.set(numbersIndex, left.get(leftIndex)); //Setting the lowest value data in the given index
                            leftIndex++; numbersIndex++;
                        } else {
                            deviceList.set(numbersIndex, right.get(rightIndex)); //Setting the lowest value data in the given index
                            rightIndex++; numbersIndex++;
                        }
                    }
                    else if(leftIndex<left.size()){
                        deviceList.set(numbersIndex, left.get(leftIndex)); //Setting the lowest value data in the given index
                        leftIndex++; numbersIndex++;
                    }
                    else if(rightIndex<right.size()){
                        deviceList.set(numbersIndex, right.get(rightIndex)); //Setting the lowest value data in the given index
                        rightIndex++; numbersIndex++;
                    }   
                    break;
                case 4:
                    //Sorting the data according to price
                    if (leftIndex < left.size() && rightIndex < right.size()) {
                        if (Integer.parseInt(left.get(leftIndex).price) < Integer.parseInt(right.get(rightIndex).price)) {
                            deviceList.set(numbersIndex, left.get(leftIndex)); //Setting the lowest value data in the given index
                            leftIndex++; numbersIndex++;
                        } else {
                            deviceList.set(numbersIndex, right.get(rightIndex)); //Setting the lowest value data in the given index
                            rightIndex++; numbersIndex++;
                        }
                    }
                    else if(leftIndex<left.size()){
                        deviceList.set(numbersIndex, left.get(leftIndex)); //Setting the lowest value data in the given index
                        leftIndex++; numbersIndex++;
                    }
                    else if(rightIndex<right.size()){
                        deviceList.set(numbersIndex, right.get(rightIndex)); //Setting the lowest value data in the given index
                        rightIndex++; numbersIndex++;
                    }   
                    break;
                case 5:
                    //Sorting the data according to date
                    if (leftIndex < left.size() && rightIndex < right.size()) {
                        if (left.get(leftIndex).date.compareToIgnoreCase(right.get(rightIndex).date) < 0 ) {
                            deviceList.set(numbersIndex, left.get(leftIndex)); //Setting the lowest value data in the given index
                            leftIndex++; numbersIndex++;
                        } else {
                            deviceList.set(numbersIndex, right.get(rightIndex)); //Setting the lowest value data in the given index
                            rightIndex++; numbersIndex++;
                        }
                    }
                    else if(leftIndex<left.size()){
                        deviceList.set(numbersIndex, left.get(leftIndex)); //Setting the lowest value data in the given index
                        leftIndex++; numbersIndex++;
                    }
                    else if(rightIndex<right.size()){
                        deviceList.set(numbersIndex, right.get(rightIndex)); //Setting the lowest value data in the given index
                        rightIndex++; numbersIndex++;
                    }   
                    break;
                default:
                    break;
            }
        }        
    }
    
    //This method is used for inserting the data into the table
    public void insertSortedData(){
        try{
            int rowCount = deviceInfoTable.getRowCount();
            int columnCount = deviceInfoTable.getColumnCount();
            int nextRow = 0;
            boolean emptyRow = false;
            String[][] value1 = new String[deviceList.size()][columnCount]; //Determining the size of 2D Array Value1
    //        System.out.println(deviceList);
            for (int j = 0; j < deviceList.size(); j++) {
                for (int k = 0; k < columnCount; k++) {
                    switch(k){
                        //Inserting value into 2D Array
                        case 0:
                            value1[j][k] = deviceList.get(j).deviceId;
                            break;
                        case 1:
                            value1[j][k] = deviceList.get(j).deviceName;
                            break;
                        case 2:
                            value1[j][k] = deviceList.get(j).brand;
                            break;
                        case 3:
                            value1[j][k] = deviceList.get(j).category;
                            break;
                        case 4:
                            value1[j][k] = deviceList.get(j).price;
                            break;
                        case 5:
                            value1[j][k] = deviceList.get(j).date;
                            break;
                        
                        default:
                            break;
                    }
                }
            }
            //Checking empty row in the table
            do{
                String s = (String) deviceInfoTable.getValueAt(nextRow,0);
                if(s!=null && s.length()!=0){
                    nextRow++;
                }
                else{
                    emptyRow = true;
                }
            }while(nextRow<rowCount && !emptyRow);
            
            //Inserting value in the table
            for (int h = 0; h < deviceList.size(); h++) {
                for (int i = 0; i < columnCount; i++) {
                    deviceInfoTable.setValueAt(value1[h][i], h, i);
                }
            }
        }
        catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "There is an error while adding");
        }
    }
    
    //This method is used for searching index of the provided search value.
    public int binarySearch(ArrayList<Device> deviceList, int low, int high, String value) {
        String searchMode = (String) coBoxSearch.getSelectedItem();
        if (coBoxSearch.getSelectedIndex()!=0) {
           if (searchMode.equalsIgnoreCase("price")) {
                while (low <= high) {
                    int mi = (low + high) / 2;
                    if (Integer.parseInt(deviceList.get(mi).price) == Integer.parseInt(value)) {
                        return mi;
                    } else if (Integer.parseInt(deviceList.get(mi).price) < Integer.parseInt(value)) {
                        low = mi + 1;
                    } else {
                        high = mi - 1;
                    }
                }
            }
            else if (searchMode.equalsIgnoreCase("category")) {
                while (low <= high) {
                    int mi = (low + high) / 2;
                    if (deviceList.get(mi).category.equals(value)) {
                        return mi;
                    } else if (deviceList.get(mi).category.compareTo(value) < 0) {
                        low = mi + 1;
                    } else {
                        high = mi - 1;
                    }
                }
            }
            else if (searchMode.equalsIgnoreCase("brand")) {
                while (low <= high) {
                    int mi = (low + high) / 2;
                    if (deviceList.get(mi).brand.equals(value)) {
                        return mi;
                    } else if (deviceList.get(mi).brand.compareTo(value) < 0) {
                        low = mi + 1;
                    } else {
                        high = mi - 1;
                    }
                }
            } 
        }
        return -1;
    }
    
    //This method is used for searching multiple index of provided search value
    public int[] binarySearchMulti(ArrayList<Device> deviceList, String value) {
        //checks if deviceList ArrayList empty or not
        if (deviceList.isEmpty()) {
            return null;
        }
        //gets first matched index number
        int firstMatch = binarySearch(deviceList, 0, deviceList.size() - 1, value);
        int[] result = {-1, -1};
        if (firstMatch == -1) {
            // Returns if searched value is not found in the ArrayList
            return result;
        }

        // Divinding and searching for multiple occurence of given value
        int leftPart = firstMatch;
        int rightPart = firstMatch;

        //Searching first part of the ArrayList for the given value
        for (int newResult = binarySearch(deviceList, 0, leftPart - 1, value); newResult != -1;) {
            leftPart = newResult;
//            System.out.println(newResult);
            newResult = binarySearch(deviceList, 0, leftPart - 1, value);

        }
        //Searching second part of the ArrayList for the given value
        for (int newResult = binarySearch(deviceList, rightPart + 1, deviceList.size() - 1, value); newResult != -1;) {
            rightPart = newResult;
//            System.out.println(newResult);
            newResult = binarySearch(deviceList, rightPart + 1, deviceList.size() - 1, value);

        }
        
        result[0] = leftPart;
        result[1] = rightPart;

        return result;

    }
    
    //This method is to read data from the file selected by file chooser
    public void readTxt(String fileName) throws FileNotFoundException, IOException {
        String file = fileName;
        BufferedReader input = null;

        try {
            input = new BufferedReader(new FileReader(file));
//            int n = 0;
            String ss;
            while ((ss = input.readLine()) != null) {
                listDevice.add(ss);
            }
            populateTable();
        } finally {
            if (input != null) {
                input.close();
            }
        }

    }

    //This method is used for populate the table after reading the file provided by the file chooser
    public void populateTable() {
        try {
            newDevice = null;
            DefaultTableModel model = (DefaultTableModel) deviceInfoTable.getModel();
            int rowCount = deviceInfoTable.getRowCount();
            int columnCount = deviceInfoTable.getColumnCount();
            int nextRow = 0;
            boolean emptyRow = false, exists=false;
            String[] name = new String[listDevice.size()];
            String deviceId = "";
            String deviceName = "";
            String brand = "";
            String category = "";
            String price = "";
            String date = "";
            Object[] newV = null;

            newDevice = new String[listDevice.size()][columnCount]; //Determining the size of 2D Array
            
            //Splitting the data
            for (int i = 0; i < listDevice.size(); i++) {
                name[i] = listDevice.get(i);
                newDevice[i] = name[i].split(",");
            }
//            System.out.println("Checkng two: " + Arrays.deepToString(newDevice));
            for (String[] arr : newDevice) {
                for (int l = 0; l < arr.length; l++) {
                    switch (l) {
                        //Getting value from the array to add
                        case 0:
                            deviceId = arr[l];
                            break;
                        case 1:
                            deviceName = arr[l];
                            break;
                        case 2:
                            brand = arr[l];
                            break;
                        case 3:
                            category = arr[l];
                            break;
                        case 4:
                            price = arr[l];
                            break;
                        case 5:
                            date = arr[l];
                            break;
                        
                        default:
                            break;
                    }
                }
                Device newDeviceInfo = new Device(deviceId, deviceName, brand, category, price, date);
                deviceList.add(newDeviceInfo);                
            }
            //Checking Empty Row
            do {
                String s = (String) deviceInfoTable.getValueAt(nextRow, 0);
                if (s != null && s.length() != 0) {
                    nextRow++;
                } else {
                    emptyRow = true;
                }
            } while (nextRow < rowCount && !emptyRow);
            
            //Checking if data already exists in the table
            for (int i = 0; i < rowCount; i++) {
                if (deviceInfoTable.getValueAt(i, 1)!=null) {
                    if (deviceInfoTable.getValueAt(i, 1).equals(deviceName)) {
                        JOptionPane.showMessageDialog(rootPane, "Already added");
                        exists=true;
                        break;
                    } 
                }

            }
            //If data doesn't exists then it will be populated to the table
            if (!exists) {
                for (int h = 0; h < listDevice.size(); h++) {
                  for (int i = 0; i < columnCount; i++) {
                      deviceInfoTable.setValueAt(newDevice[h][i], nextRow, i);
                      model.addRow(newV); // Add Empty row in each iteration
                  }
                  nextRow++;
                }  
            }
            
            name = null;
            listDevice.clear();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "There is an error while adding");
        }
    }
    
    //This method is used to search the value using provided information
    public void searchedItem(){
        //Get the data from the search field either it will be price, brand or category
        String va  = txtSearch.getText();
        String searchMode = (String) coBoxSearch.getSelectedItem(); //Search Criterion
        
        //Gets two value for indexes
        int[] multiIndex = binarySearchMulti(deviceList, va);
        if (multiIndex!=null) {
            int low = multiIndex[0];
            int high = multiIndex[1];
            int count = 0;
            int newC = 0;
            String[] newVa;

            if (multiIndex.length == 2 && low != -1 && high != -1) {
                for (int i = 0; i <= (high-low); i++) {

                    //If difference between value of high and value of low is 0 then it will show one value
                    if (high-low==0) {
                        JOptionPane.showMessageDialog(rootPane, "Device Name: " + deviceList.get(low).deviceName
                                + "\nDevice Brand: " + deviceList.get(low).brand
                                + "\nCategory: " + deviceList.get(low).category
                                + "\nPrice: " + deviceList.get(low).price,
                                "Teacher Details", JOptionPane.PLAIN_MESSAGE);

                    } else {
                        // IF there is difference between high and low then count is increased to determined the size of String array
                        count++;
                    }
                }
                
                if (count!=0) {
                    newVa = new String[count];
                    if (coBoxSearch.getSelectedIndex()!=0) {
                        if (searchMode.equalsIgnoreCase("price")) {

                            while(low<=high){
                                int devicePrice = Integer.parseInt(deviceList.get(low).price);
                                int searchedPrice = Integer.parseInt(va);
                                if (searchedPrice==devicePrice) {
                                    newVa[newC] = deviceList.get(low).deviceName;
                                    newC++;
                                }
                                low++;
                            }
                            String device = String.join(", ",newVa);
                            JOptionPane.showMessageDialog(rootPane, "Searched Price: " + va+"\n Number of Items found: "+count+"\nItems found: " + device, "Device Details", JOptionPane.INFORMATION_MESSAGE);
                        }
                        else if (searchMode.equalsIgnoreCase("brand")) {
                            while(low<=high){
                                if (deviceList.get(low).brand.equals(va)) {
                                    newVa[newC] = deviceList.get(low).deviceName;
                                    newC++;
                                }
                                low++;
                            }
                            String device = String.join(", ",newVa);
                            JOptionPane.showMessageDialog(rootPane, "Searched brand: " + va+"\n Number of Items found: "+count+"\nItems found: " + device, "Device Details", JOptionPane.INFORMATION_MESSAGE);
                        }
                        else if (searchMode.equalsIgnoreCase("category")) {
                            while(low<=high){
                                if (deviceList.get(low).category.equals(va)) {
                                    newVa[newC] = deviceList.get(low).deviceName;
                                    newC++;
                                }
                                low++;
                            }
                            String device = String.join(", ",newVa);
                            JOptionPane.showMessageDialog(rootPane, "Searched Category: " + va+"\n Number of Items found: "+count+"\nItems found: " + device, "Device Details", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                    else{
                       JOptionPane.showMessageDialog(rootPane, "Please select category what you want to use for search", "Error", JOptionPane.ERROR_MESSAGE); 
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Information for : " + va+  " not found", "Error", JOptionPane.ERROR_MESSAGE);
            }  
        }else {
                JOptionPane.showMessageDialog(rootPane, "There is no data in the table", "Error", JOptionPane.ERROR_MESSAGE);
            }
        
    }
    
    //This method is used to clear all the field of the program and some text field set to usual self
    public void clearField(){
        Component deviInfo[] = devicePanel.getComponents();
        for (Component component : deviInfo) {
            if (component instanceof JTextField) {
                JTextField newJTextField = (JTextField) component;
                newJTextField.setText("");
                
            }
            if (component instanceof JComboBox) {
                JComboBox newJComboBox = (JComboBox) component;
                newJComboBox.setSelectedIndex(0);
            }
        }
        txtDay.setText("DD");
        txtMonth.setText("MM");
        txtYear.setText("YYYY");
        btnGrpCategory.clearSelection();
        coBoxSearch.setSelectedIndex(0);
        txtSearch.setText("Search");
    }
}
